import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import datetime
from scipy import stats
import logging


class LivestockPricePredictor:
    def __init__(self):
        """Initialize the livestock price prediction system"""
        self.model = RandomForestRegressor(n_estimators=100, random_state=42)
        self.scaler = StandardScaler()
        self.features = None
        self.price_history = None
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(level=logging.INFO)

    def calculate_trend_features(self, df):
        """
        Calculate advanced trend features from price data.

        Parameters:
        df (pandas.DataFrame): DataFrame with historical price data
        """
        # Sort by date
        df = df.sort_values('date')

        # Calculate moving averages
        df['price_ma_7'] = df['price'].rolling(window=7).mean()
        df['price_ma_30'] = df['price'].rolling(window=30).mean()

        # Calculate price momentum (rate of change)
        df['price_momentum_7'] = df['price'].pct_change(periods=7)
        df['price_momentum_30'] = df['price'].pct_change(periods=30)

        # Calculate volatility
        df['price_volatility'] = df['price'].rolling(window=30).std()

        # Calculate seasonal strength
        df['month'] = df['date'].dt.month
        monthly_avg = df.groupby('month')['price'].transform('mean')
        df['seasonal_strength'] = df['price'] / monthly_avg

        # Calculate price trends using linear regression
        df['price_trend'] = df['price'].rolling(window=30).apply(
            lambda x: stats.linregress(range(len(x)), x)[0] if len(x) >= 30 else np.nan
        )

        # Drop rows with NaN values created by rolling windows
        df = df.dropna()

        return df

    def analyze_market_trends(self, start_date=None, end_date=None):
        """
        Perform comprehensive market trend analysis.

        Parameters:
        start_date (str): Start date for analysis (optional)
        end_date (str): End date for analysis (optional)

        Returns:
        dict: Market trend analysis results
        """
        if self.price_history is None:
            raise ValueError("No price history available for analysis")

        df = self.price_history.copy()

        # Filter by date range if provided
        if start_date:
            df = df[df['date'] >= pd.to_datetime(start_date)]
        if end_date:
            df = df[df['date'] <= pd.to_datetime(end_date)]

        # Calculate basic statistics
        stats_analysis = {
            'mean_price': df['price'].mean(),
            'median_price': df['price'].median(),
            'price_volatility': df['price'].std(),
            'price_range': df['price'].max() - df['price'].min(),
            'total_volume': len(df)
        }

        # Calculate seasonal patterns
        seasonal_analysis = df.groupby(df['date'].dt.month)['price'].agg([
            'mean', 'std', 'count'
        ]).round(2)

        # Calculate price momentum
        recent_momentum = df['price'].pct_change(periods=30).iloc[-1]

        # Identify price trends
        recent_trend = stats.linregress(
            range(len(df['price'][-30:])),
            df['price'][-30:]
        )

        # Determine market regime
        current_ma = df['price_ma_30'].iloc[-1]
        current_price = df['price'].iloc[-1]
        market_regime = 'Bullish' if current_price > current_ma else 'Bearish'

        return {
            'basic_stats': stats_analysis,
            'seasonal_patterns': seasonal_analysis,
            'recent_momentum': recent_momentum,
            'trend_slope': recent_trend.slope,
            'trend_r_squared': recent_trend.rvalue ** 2,
            'market_regime': market_regime
        }

    def prepare_features(self, df):
        """
        Prepare features from raw data including trend features.

        Parameters:
        df (pandas.DataFrame): DataFrame with columns 'date', 'price', 'weight', 'age',
                             'breed', 'season', 'market_location'
        """
        # Calculate trend features
        df = self.calculate_trend_features(df)

        # Convert date to useful features
        df['month'] = df['date'].dt.month
        df['year'] = df['date'].dt.year
        df['day_of_week'] = df['date'].dt.dayofweek

        # Create seasonal indicators
        df['is_winter'] = df['season'].str.lower() == 'winter'
        df['is_summer'] = df['season'].str.lower() == 'summer'
        df['is_spring'] = df['season'].str.lower() == 'spring'
        df['is_fall'] = df['season'].str.lower() == 'fall'

        # One-hot encode categorical variables
        breed_dummies = pd.get_dummies(df['breed'], prefix='breed')
        location_dummies = pd.get_dummies(df['market_location'], prefix='location')

        # Combine all features
        features = pd.concat([
            df[['weight', 'age', 'month', 'year', 'day_of_week']],
            df[['price_ma_7', 'price_ma_30', 'price_momentum_7', 'price_momentum_30',
                'price_volatility', 'seasonal_strength', 'price_trend']],
            df[['is_winter', 'is_summer', 'is_spring', 'is_fall']],
            breed_dummies,
            location_dummies
        ], axis=1)

        return features

    def train(self, training_data):
        """
        Train the prediction model.

        Parameters:
        training_data (pandas.DataFrame): Historical livestock market data
        """
        # Store price history with trend features for trend analysis
        self.price_history = self.calculate_trend_features(training_data.copy())

        # Prepare features
        X = self.prepare_features(training_data)
        y = training_data['price']

        # Drop rows with NaN values in features and target
        df = pd.concat([X, y], axis=1).dropna()
        X = df.drop('price', axis=1)
        y = df['price']

        # Store feature columns for prediction
        self.features = X.columns

        # Scale features
        X_scaled = self.scaler.fit_transform(X)

        # Train model
        self.model.fit(X_scaled, y)

        # Calculate and return training metrics
        y_pred = self.model.predict(X_scaled)
        mse = mean_squared_error(y, y_pred)
        r2 = r2_score(y, y_pred)

        return {
            'mse': mse,
            'rmse': np.sqrt(mse),
            'r2': r2
        }

    def predict_with_confidence(self, new_data):
        """
        Make price predictions with confidence intervals.

        Parameters:
        new_data (pandas.DataFrame): New livestock data to predict prices for.

        Returns:
        DataFrame: Predictions with confidence intervals.
        """
        if self.features is None:
            raise ValueError("Model needs to be trained before making predictions")

        # Prepare features
        X = self.prepare_features(new_data)

        # Ensure all features exist in new data
        for feature in self.features:
            if feature not in X.columns:
                X[feature] = 0

        # Reorder columns to match training data
        X = X[self.features]

        # Scale features
        X_scaled = self.scaler.transform(X)

        # Make predictions with multiple trees
        predictions = []
        for estimator in self.model.estimators_:
            predictions.append(estimator.predict(X_scaled))

        predictions = np.array(predictions).T  # Transpose to align predictions

        # Calculate mean and confidence intervals
        mean_pred = predictions.mean(axis=1)
        lower_bound = np.percentile(predictions, 2.5, axis=1)
        upper_bound = np.percentile(predictions, 97.5, axis=1)

        return pd.DataFrame({
            'predicted_price': mean_pred,
            'lower_bound': lower_bound,
            'upper_bound': upper_bound,
            'confidence_range': upper_bound - lower_bound
        })


# Example usage
def example_usage():
    # Create sample training data with time series
    dates = pd.date_range(start='2023-01-01', periods=365)
    base_price = 1000

    # Generate realistic price movements
    np.random.seed(42)
    price_changes = np.random.normal(0, 20, 365).cumsum()
    seasonal_pattern = 100 * np.sin(np.linspace(0, 2 * np.pi, 365))  # Annual seasonal pattern

    training_data = pd.DataFrame({
        'date': dates,
        'price': base_price + price_changes + seasonal_pattern,
        'weight': np.random.uniform(300, 800, 365),
        'age': np.random.uniform(1, 5, 365),
        'breed': np.random.choice(['Angus', 'Hereford', 'Holstein'], 365),
        'season': pd.Series(dates).apply(lambda x: 'Winter' if x.month in [12, 1, 2]
        else 'Spring' if x.month in [3, 4, 5]
        else 'Summer' if x.month in [6, 7, 8]
        else 'Fall'),
        'market_location': np.random.choice(['North', 'South', 'Central'], 365)
    })

    # Initialize and train the predictor
    predictor = LivestockPricePredictor()
    metrics = predictor.train(training_data)

    print("Training Metrics:")
    print(f"Root Mean Squared Error: ${metrics['rmse']:.2f}")
    print(f"R-squared Score: {metrics['r2']:.3f}")

    # Perform market trend analysis
    trend_analysis = predictor.analyze_market_trends(
        start_date='2023-06-01',
        end_date='2023-12-31'
    )

    print("\nMarket Trend Analysis:")
    print(f"Market Regime: {trend_analysis['market_regime']}")
    print(f"Recent Momentum: {trend_analysis['recent_momentum']:.2%}")
    print(f"Trend R-squared: {trend_analysis['trend_r_squared']:.3f}")

    # Make predictions with confidence intervals
    new_data = pd.DataFrame({
        'date': pd.date_range(start='2024-01-01', periods=5),
        'weight': np.random.uniform(300, 800, 5),
        'age': np.random.uniform(1, 5, 5),
        'breed': np.random.choice(['Angus', 'Hereford', 'Holstein'], 5),
        'season': ['Winter'] * 5,
        'market_location': np.random.choice(['North', 'South', 'Central'], 5),
        'price': np.random.uniform(900, 1100, 5)  # Needed for feature calculation
    })

    predictions = predictor.predict_with_confidence(new_data)

    print("\nPredictions with Confidence Intervals:")
    print(predictions.round(2))


if __name__ == "__main__":
    example_usage()
